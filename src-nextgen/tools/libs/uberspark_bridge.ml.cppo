(****************************************************************************)
(****************************************************************************)
(* uberSpark bridge module interface implementation *)
(*	 author: amit vasudevan (amitvasudevan@acm.org) *)
(****************************************************************************)
(****************************************************************************)

open Unix
open Yojson




(****************************************************************************)
(* general submodules *)
(****************************************************************************)

module Container =
struct
#include "uberspark_bridge_container.ml"
end

module Native =
struct
#include "uberspark_bridge_native.ml"
end




(****************************************************************************)
(* general interfaces *)
(****************************************************************************)

let dump
	(bridge_ns_path : string)
	?(bridge_exectype = "container")
	(output_directory : string)
	=
	let src_bridge_json_filename = Uberspark_config.namespace_root ^ bridge_ns_path ^ "/" ^
			Uberspark_config.namespace_bridge_mf_filename in
	let dst_json_filename = output_directory ^ "/" ^ Uberspark_config.namespace_bridge_mf_filename in
	let src_bridge_container_filename = Uberspark_config.namespace_root ^ bridge_ns_path ^ 
			"/" ^ Uberspark_config.namespace_bridge_container_filename in
	let dst_container_filename = output_directory ^ "/" ^ Uberspark_config.namespace_bridge_container_filename in
	
	(* copy json file *)
	Uberspark_osservices.file_copy src_bridge_json_filename dst_json_filename;

	(* if container, then dump container file as well *)
	if(bridge_exectype = "container") then
		Uberspark_osservices.file_copy src_bridge_container_filename dst_container_filename;
	;

	()
;;


let remove
	(bridge_ns_path : string)
	=
	let full_bridge_ns_path = Uberspark_config.namespace_root ^ bridge_ns_path in
	
	(* remove the path and files within *)
	Uberspark_osservices.rmdir_recurse [ full_bridge_ns_path ];
	()
;;




(****************************************************************************)
(* bridge submodules *)
(****************************************************************************)

module Cc =
struct
#include "uberspark_bridge_cc.ml"
end




(****************************************************************************)
(* general interfaces *)
(****************************************************************************)
let initialize_from_config () 
	: bool =
	
	let retval = ref false in

	
	if Uberspark_config.config_settings.bridge_cc_bridge = "" then
		begin
		Uberspark_logger.log ~lvl:Uberspark_logger.Error "cc_bridge is unspecified";
		ignore (exit 1);
		end
	;

	if (Cc.load Uberspark_config.config_settings.bridge_cc_bridge) then
		begin
		Uberspark_logger.log "loaded cc_bridge settings";
		retval := true;
		end
	else
		begin
		Uberspark_logger.log ~lvl:Uberspark_logger.Error "unable to load cc_bridge settings!";
		retval := false;
		end
	;  

	(!retval)
;;
