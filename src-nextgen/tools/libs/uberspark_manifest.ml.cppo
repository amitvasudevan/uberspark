(*----------------------------------------------------------------------------*)
(* uberSpark manifest interface *)
(*	 author: amit vasudevan (amitvasudevan@acm.org) *)
(*----------------------------------------------------------------------------*)

open Yojson

(* uberspark generic manifest header *)
type hdr_t =
{
	mutable f_coss_version : string;			
	mutable f_mftype : string;
	mutable f_uberspark_min_version   : string;
	mutable f_uberspark_max_version   : string;
};;



(*
(****************************************************************************)
(* return json object for a given manifest file *)
(****************************************************************************)
let get_manifest_json
	?(check_header = true) 
	(mf_filename : string)
	= 

	let retval = ref false in
	let retjson = ref `Null in

	try
				
		let mf_json = Yojson.Basic.from_file mf_filename in
			retval := true;
			retjson := mf_json;
								
	with Yojson.Json_error s -> 
			Uberspark_logger.log ~lvl:Uberspark_logger.Error "usmf_read_manifest: ERROR:%s" s;
			retval := false;
			;
	
	(!retval, !retjson)
;;
*)



(*--------------------------------------------------------------------------*)
(* parse node: "uberspark-hdr" *)
(* input: manifest json *)
(* return: *)
(* on success: true, manifest header node as hdr_t*)
(* on failure: false *)
(*--------------------------------------------------------------------------*)

let parse_uberspark_hdr 
	(mf_json : Yojson.Basic.t)
	(uberspark_hdr : hdr_t) 
	: bool =

	let retval = ref false in

	try
		let open Yojson.Basic.Util in
			let json_mf_hdr = mf_json |> member "uberspark-hdr" in
			if(json_mf_hdr <> `Null) then
				begin
					uberspark_hdr.f_coss_version <- json_mf_hdr |> member "coss_version" |> to_string;
					uberspark_hdr.f_mftype <- json_mf_hdr |> member "mftype" |> to_string;
					uberspark_hdr.f_uberspark_min_version <- json_mf_hdr |> member "uberspark_min_version" |> to_string;
					uberspark_hdr.f_uberspark_max_version <- json_mf_hdr |> member "uberspark_max_version" |> to_string;
					retval := true;
				end
			;

	with Yojson.Basic.Util.Type_error _ -> 
			retval := false;
	;

	(!retval)
;;




(*--------------------------------------------------------------------------*)
(* read manifest file into json object; sanity checking uberspark version *)
(*--------------------------------------------------------------------------*)

let get_manifest_json 
	?(check_header = true)
	(mf_filename : string)
	: bool * Yojson.Basic.json = 
	let retval = ref false in
	let retjson = ref `Null in

	try

		let mf_json = Yojson.Basic.from_file mf_filename in
		retjson := mf_json;
		retval := true;

		if (check_header) then
		begin
			let mf_hdr : hdr_t = { f_coss_version = ""; f_mftype = ""; f_uberspark_max_version = "";
				f_uberspark_min_version = "";} in
			let mf_hdr_parsed = parse_uberspark_hdr mf_json mf_hdr in
			if (mf_hdr_parsed) then 
				begin
					(* TBD: sanity check header and version *)
					retval := true;
					retjson := mf_json;
				end
			else 
				begin
					Uberspark_logger.log ~lvl:Uberspark_logger.Error "could not find valid header within manifest!";
					retval := false;
					retjson := `Null;
				end
			;
		end
		;

	with Yojson.Json_error s -> 
		Uberspark_logger.log ~lvl:Uberspark_logger.Error "%s" s;
		retval := false;
	;

	(!retval, !retjson)
;;



(****************************************************************************)
(* write interfaces *)
(****************************************************************************)

(*--------------------------------------------------------------------------*)
(* write manifest prologue *)
(*--------------------------------------------------------------------------*)
let write_prologue 
	?(prologue_str = "uberSpark manifest")
	(oc : out_channel)
	: bool = 
	
	let retval = ref false in

	Printf.fprintf oc "\n/* --- this file is autogenerated --- */";
	Printf.fprintf oc "\n/* %s */" prologue_str;
	Printf.fprintf oc "\n";
	Printf.fprintf oc "\n";
	Printf.fprintf oc "\n{";

	retval := true;

	(!retval)
;;



(*--------------------------------------------------------------------------*)
(* write manifest epilogue *)
(*--------------------------------------------------------------------------*)
let write_epilogue 
	?(epilogue_str = "uberSpark end-of-manifest")
	(oc : out_channel)
	: bool = 
	
	let retval = ref false in

	Printf.fprintf oc "\n";
	Printf.fprintf oc "\n";
	Printf.fprintf oc "\n/* %s */" epilogue_str;
	Printf.fprintf oc "\n";
	Printf.fprintf oc "\n{";

	retval := true;

	(!retval)
;;





(****************************************************************************)
(* submodules *)
(****************************************************************************)


module Config =
struct
#include "uberspark_manifest_config.ml"
end

module Uobj =
struct
#include "uberspark_manifest_uobj.ml"
end

module Uobjslt =
struct
#include "uberspark_manifest_uobjslt.ml"
end

